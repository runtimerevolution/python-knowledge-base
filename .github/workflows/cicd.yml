name: ci

on:
  push

env:
  POSTGRES_DBNAME: postgres
  POSTGRES_USER: postgres
  POSTGRES_PWDD: postgres
  POSTGRES_HOST: 127.0.0.1
  POSTGRES_PORT: 15434

jobs:
  django_tests:
    name: Django Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: "postgres:15"
        env:
          POSTGRES_PASSWORD: ${{env.POSTGRES_PWD}}
          POSTGRES_USER: ${{env.POSTGRES_USER}}
          POSTGRES_DB: ${{env.POSTGRES_DBNAME}}
        ports:
          - 15434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install and configure Poetry
        run: |
          INSTALL_PATH="$HOME/.local"
          INSTALLATION_SCRIPT="$(mktemp)"
          VIRTUALENVS_PATH="{cache-dir}/virtualenvs/#\~/$HOME"

          curl -sSL https://install.python-poetry.org/ --output "$INSTALLATION_SCRIPT"

          POETRY_HOME=$INSTALL_PATH python3 "$INSTALLATION_SCRIPT" --yes --version="1.3.2"

          export PATH="/root/.local/bin:$PATH"

          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.path "$VIRTUALENVS_PATH"

          echo "VENV=.venv/bin/activate" >> "$GITHUB_ENV"

      - name: Install Dependencies
        run: |
          export PATH="/root/.local/bin:$PATH"
          poetry install --no-interaction

      - name: Run Tests
        run: |
          source $VENV
          cd sample_django_project && python manage.py test

  deploy:
    name: Deploy to prod
    runs-on: ubuntu-latest

    needs: test

    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install mkdocs-material
      - run: mkdocs gh-deploy --force
